{"ast":null,"code":"import _objectSpread from \"/Users/idrissdimson/Downloads/Screeech/screech-client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { SET_USER, SET_AUTHENTICATED, SET_UNAUTHENTICATED, LOADING_USER, LIKE_SCREECH, UNLIKE_SCREECH, MARK_NOTIFICATIONS_READ } from '../types';\nconst initialState = {\n  authenticated: false,\n  loading: false,\n  credentials: {},\n  likes: [],\n  notifications: []\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATED:\n      return _objectSpread({}, state, {\n        authenticated: true\n      });\n\n    case SET_UNAUTHENTICATED:\n      return initialState;\n\n    case SET_USER:\n      return _objectSpread({\n        authenticated: true,\n        loading: false\n      }, action.payload);\n\n    case LOADING_USER:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case LIKE_SCREECH:\n      return _objectSpread({}, state, {\n        likes: [...state.likes, {\n          userHandle: state.credentials.handle,\n          screechId: action.payload.screechId\n        }]\n      });\n\n    case UNLIKE_SCREECH:\n      return _objectSpread({}, state, {\n        likes: state.likes.filter(like => like.screechId !== action.payload.screechId)\n      });\n\n    case MARK_NOTIFICATIONS_READ:\n      state.notifications.forEach(not => not.read = true);\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/idrissdimson/Downloads/Screeech/screech-client/src/redux/reducers/userReducer.js"],"names":["SET_USER","SET_AUTHENTICATED","SET_UNAUTHENTICATED","LOADING_USER","LIKE_SCREECH","UNLIKE_SCREECH","MARK_NOTIFICATIONS_READ","initialState","authenticated","loading","credentials","likes","notifications","state","action","type","payload","userHandle","handle","screechId","filter","like","forEach","not","read"],"mappings":";AAAA,SACEA,QADF,EAEEC,iBAFF,EAGEC,mBAHF,EAIEC,YAJF,EAKEC,YALF,EAMEC,cANF,EAOEC,uBAPF,QAQO,UARP;AAUA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,WAAW,EAAE,EAHM;AAInBC,EAAAA,KAAK,EAAE,EAJY;AAKnBC,EAAAA,aAAa,EAAE;AALI,CAArB;AAQA,eAAe,UAASC,KAAK,GAAGN,YAAjB,EAA+BO,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,iBAAL;AACE,+BACKY,KADL;AAEEL,QAAAA,aAAa,EAAE;AAFjB;;AAIF,SAAKN,mBAAL;AACE,aAAOK,YAAP;;AACF,SAAKP,QAAL;AACE;AACEQ,QAAAA,aAAa,EAAE,IADjB;AAEEC,QAAAA,OAAO,EAAE;AAFX,SAGKK,MAAM,CAACE,OAHZ;;AAKF,SAAKb,YAAL;AACE,+BACKU,KADL;AAEEJ,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKL,YAAL;AACE,+BACKS,KADL;AAEEF,QAAAA,KAAK,EAAE,CACL,GAAGE,KAAK,CAACF,KADJ,EAEL;AACEM,UAAAA,UAAU,EAAEJ,KAAK,CAACH,WAAN,CAAkBQ,MADhC;AAEEC,UAAAA,SAAS,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAF5B,SAFK;AAFT;;AAUF,SAAKd,cAAL;AACE,+BACKQ,KADL;AAEEF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYS,MAAZ,CACLC,IAAI,IAAIA,IAAI,CAACF,SAAL,KAAmBL,MAAM,CAACE,OAAP,CAAeG,SADrC;AAFT;;AAMF,SAAKb,uBAAL;AACEO,MAAAA,KAAK,CAACD,aAAN,CAAoBU,OAApB,CAA4BC,GAAG,IAAKA,GAAG,CAACC,IAAJ,GAAW,IAA/C;AACA,+BACKX,KADL;;AAGF;AACE,aAAOA,KAAP;AA3CJ;AA6CD","sourcesContent":["import {\n  SET_USER,\n  SET_AUTHENTICATED,\n  SET_UNAUTHENTICATED,\n  LOADING_USER,\n  LIKE_SCREECH,\n  UNLIKE_SCREECH,\n  MARK_NOTIFICATIONS_READ\n} from '../types';\n\nconst initialState = {\n  authenticated: false,\n  loading: false,\n  credentials: {},\n  likes: [],\n  notifications: []\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATED:\n      return {\n        ...state,\n        authenticated: true\n      };\n    case SET_UNAUTHENTICATED:\n      return initialState;\n    case SET_USER:\n      return {\n        authenticated: true,\n        loading: false,\n        ...action.payload\n      };\n    case LOADING_USER:\n      return {\n        ...state,\n        loading: true\n      };\n    case LIKE_SCREECH:\n      return {\n        ...state,\n        likes: [\n          ...state.likes,\n          {\n            userHandle: state.credentials.handle,\n            screechId: action.payload.screechId\n          }\n        ]\n      };\n    case UNLIKE_SCREECH:\n      return {\n        ...state,\n        likes: state.likes.filter(\n          like => like.screechId !== action.payload.screechId\n        )\n      };\n    case MARK_NOTIFICATIONS_READ:\n      state.notifications.forEach(not => (not.read = true));\n      return {\n        ...state\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}